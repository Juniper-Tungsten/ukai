
extensions:
- id: network
  path: "/v1.0/tenant/networks"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./network.yaml
    - network_resource:
        transaction: $transaction
        network: $resource
        event_type: $event_type
        queue: $queue
        db: $db
- id: route_target_association
  path: "/v1.0/admin/route_target_associations"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./network.yaml
    - when: event_type == "post_create_in_transaction" || event_type == "post_update_in_transaction" || event_type == "pre_delete_in_transaction"
      db_exec:
        tx: $transaction
        sql: "update local_networks set task_status='IN_PROGRESS' where network_id = ?"
        arguments:
        - $resource.network_id
    - when: event_type == "post_create" || event_type == "post_update" || event_type == "pre_delete"
      job:
      - create_local_networks:
          db: $db
          filter:
            network_id: $resource.network_id
            task_status: IN_PROGRESS
      queue: $queue
- id: id_pool
  path: "/v1.0/admin/id_pools"
  code_type: gohanscript
  code: |
    tasks:
    - when: event_type == "pre_create_in_transaction"
      blocks:
      - when: resource.start > resource.end
        vars:
          exception:
            name: CustomException
            code: 400
            message: "pool end is bigger than start"
      - db_query:
          tx: $transaction
          schema_id: id_pool
          sql: select * from id_pools where ? <= end and start <= ? and name = ?;
          arguments:
          - $resource.start
          - $resource.end
          - $resource.name
        register: overwrap
      - when: len(overwrap) > 0
        vars:
          exception:
            name: CustomException
            code: 400
            message: "overwrap with existing pool"
- id: image
  path: "/v1.0/tenant/images"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./image.yaml
    - image_resource:
        image: $resource
        event_type: $event_type
        db: $db
        transaction: $transaction
        queue: $queue
- id: flavor
  path: "/v1.0/tenant/flavors"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./flavor.yaml
    - flavor_resource:
        flavor: $resource
        event_type: $event_type
        db: $db
        transaction: $transaction
        queue: $queue
- id: service_template
  path: "/v1.0/tenant/service_templates"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./service_template.yaml
    - service_template_resource:
        service_template: $resource
        event_type: $event_type
        db: $db
        transaction: $transaction
        queue: $queue
- id: server
  path: "/v1.0/servers"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./server.yaml
    - server_resource:
        server: $resource
        event_type: $event_type
        db: $db
        transaction: $transaction
        queue: $queue
- id: service_instance
  path: "/v1.0/tenant/service_instances"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./service_instance.yaml
    - service_instance_resource:
        service_instance: $resource
        event_type: $event_type
        db: $db
        transaction: $transaction
        queue: $queue
- id: local_server
  path: "/v1.0/local_servers"
  code_type: gohanscript
  code: |
    tasks:
    - when: event_type == "post_list"
      blocks:
      - get_config: key="keystone" default_value=null
        register: keystone_config
      - get_openstack_client:
          auth_url: "{{ item.location.keystone_endpoint }}"
          user_name: "{{ keystone_config.user_name }}"
          password: "{{ keystone_config.password }}"
          version: v2.0
          tenant_name:  "{{ keystone_config.tenant_name }}"
          tenant_id: ""
          domain_name: ""
        register: client
      - openstack_endpoint: client=$client endpoint_type=compute region="{{item.location.region}}" name="" availability=""
        register: url
      - openstack_post:
          client: $client
          url: "{{ url }}servers/{{ item.instance_id }}/action"
          data:
            os-getVNCConsole:
              type: novnc
        register: console_info
      - vars:
          item.console_url: $console_info.console.url
      with_items: $response.local_servers
      worker: 10
- id: network_policy
  path: "/v1.0/tenant/network_policies"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./network_policy.yaml
    - network_policy_resource:
        network_policy: $resource
        event_type: $event_type
        db: $db
        transaction: $transaction
- id: security_group
  path: "/v1.0/tenant/security_groups"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./security_group.yaml
    - security_group_resource:
        security_group: $resource
        event_type: $event_type
        db: $db
        transaction: $transaction
        queue: $queue
- id: security_group_rules
  path: "/v1.0/tenant/security_group_rules"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./security_group.yaml
    - security_group_rule_resource:
        security_group_rule: $resource
        event_type: $event_type
        db: $db
        queue: $queue
        transaction: $transaction
        params: $params
- id: location
  path: "/v1.0/locations"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./location.yaml
    - location_resource:
        location: $resource
        event_type: $event_type
        db: $db
        transaction: $transaction
        queue: $queue
- id: heat
  path: "/v1.0/tenant/heat_instances"
  code_type: gohanscript
  code: |
    tasks:
    - include: ./heat.yaml
    - heat_instance_resource:
        heat_instance: $resource
        event_type: $event_type
        db: $db
        transaction: $transaction
        queue: $queue