- include: ./contrail.yaml
- define:
    name: create_local_network_policy
    args:
      local_network_policy: object
    body:
    - vars:
        location: $local_network_policy.location
        network_policy: $local_network_policy.network_policy
        contrail_endpoint: $local_network_policy.location.contrail_endpoint
    - get_config: key=keystone default_value=null
      register: keystone_config
    - get_openstack_client:
        auth_url: "{{ location.keystone_endpoint }}"
        user_name: "{{ keystone_config.user_name }}"
        password: "{{ keystone_config.password }}"
        version: v2.0
        tenant_name: "{{ keystone_config.tenant_name }}"
        domain_name: ""
      register: client
    - contrail_fqdn:
        client: $client
        contrail_endpoint:  $location.contrail_endpoint
        uuid: $network_policy.tenant_id
      register: fqdn
    - append:
        list: $fqdn
        value: "{{ network_policy.id }}"
      register: fqdn
    - openstack_ensure:
        client: $client
        url: "{{ location.contrail_endpoint }}/network-policy/{{ network_policy.id }}"
        post_url: "{{ location.contrail_endpoint }}/network-policys"
        data:
          network-policy:
            parent_type: project
            uuid: "{{ network_policy.id }}"
            fq_name: $fqdn
            network_policy_entries:
              policy_rule: $network_policy.entries
      register: output
    - openstack_put:
        client: $client
        url: "{{ location.contrail_endpoint }}/virtual-network/{{ network_policy.source_network_id }}"
        data:
          virtual-network:
            network_policy_refs:
            - attr:
                timer: null
                sequence:
                  major: 0
                  minor: 0
              to: $fqdn
    - openstack_put:
        client: $client
        url: "{{ location.contrail_endpoint }}/virtual-network/{{ network_policy.dest_network_id }}"
        data:
          virtual-network:
            network_policy_refs:
            - attr:
                timer: null
                sequence:
                  major: 0
                  minor: 0
              to: $fqdn
    - return: $output
- define:
    name: delete_local_network_policy
    args:
      local_network_policy: object
    body:
    - vars:
        location: $local_network_policy.location
        network_policy: $local_network_policy.network_policy
        contrail_endpoint: $local_network_policy.location.contrail_endpoint
    - get_config: key=keystone default_value=null
      register: keystone_config
    - get_openstack_client:
        auth_url: "{{ location.keystone_endpoint }}"
        user_name: "{{ keystone_config.user_name }}"
        password: "{{ keystone_config.password }}"
        version: v2.0
        tenant_name: "{{ keystone_config.tenant_name }}"
        domain_name: ""
      register: client
    - openstack_put:
        client: $client
        url: "{{ location.contrail_endpoint }}/virtual-network/{{ network_policy.source_network_id }}"
        data:
          virtual-network:
            network_policy_refs: []
    - openstack_put:
        client: $client
        url: "{{ location.contrail_endpoint }}/virtual-network/{{ network_policy.dest_network_id }}"
        data:
          virtual-network:
            network_policy_refs: []
    - openstack_delete:
        client: $client
        url: "{{ location.contrail_endpoint }}/network-policy/{{ network_policy.id }}"
- define:
    name: create_local_network_policies
    args:
      db: object
      filter: $filter
    body:
    - transaction:
      - db_list:
          tx: $transaction
          schema_id: local_network_policy
          filter: $filter
        register: local_network_policies
    - blocks:
      - vars:
          status: ACTIVE
          task_status: COMPLETE
      - create_local_network_policy:
          local_network_policy: $item
        register: output
        rescue:
        - vars:
            status: ERROR
            task_status: IN_PROGRESS
            output: $error
      - transaction:
        - db_update:
            tx: $transaction
            schema_id: local_network_policy
            data:
              id: "{{ item.id }}"
              network_policy_id: "{{ item.network_policy_id }}"
              status: $status
              task_status: $task_status
              output: $output
      with_items: $local_network_policies
- define:
    name: delete_local_network_policies
    args:
      db: object
      filter: $filter
    body:
    - transaction:
      - db_list:
          tx: $transaction
          schema_id: local_network_policy
          filter: $filter
        register: local_network_policies
    - blocks:
      - delete_local_network_policy:
          local_network_policy: $item
      - transaction:
        - db_delete:
            tx: $transaction
            schema_id: local_network_policy
            id: $item.id
      with_items: $local_network_policies
- define:
    name: network_policy_resource
    args:
      network_policy: object
      event_type: string
      db: object
      transaction: object
    body:
    - when: event_type == "pre_create"
      blocks:
      - when: network_policy.source_network_id == network_policy.dest_network_id
        error:
          name: CustomException
          code: 400
          message: "source network and dest network must be different"
    - when: event_type == "post_create_in_transaction"
      blocks:
      - db_get:
          schema_id: network
          tx: $transaction
          id: $network_policy.source_network_id
          tenant_id: $network_policy.tenant_id
        rescue:
        - error:
            name: CustomException
            code: 404
            message: "source network not found"
      - db_get:
          schema_id: network
          tx: $transaction
          id: $network_policy.dest_network_id
          tenant_id: $network_policy.tenant_id
        rescue:
        - error:
            name: CustomException
            code: 404
            message: "dest network not found"
      - db_list:
          tx: $transaction
          schema_id: location
          filter: {}
        register: locations
      - blocks:
        - db_create:
            tx: $transaction
            schema_id: local_network_policy
            data:
              id: $UUID()
              network_policy_id: "{{ network_policy.id }}"
              location_id: "{{ item.id }}"
              task_status: "IN_PROGRESS"
        with_items: $locations
    - when: event_type == "post_update_in_transaction"
      db_exec:
              tx: $transaction
              sql: "update local_network_policys set task_status='IN_PROGRESS' where network_policy_id = ?"
              arguments:
              - $network_policy.id
    - when: event_type == "post_create" || event_type == "post_update"
      blocks:
      - create_local_network_policies:
          db: $db
          filter:
            network_policy_id: "{{ network_policy.id }}"
            task_status: "IN_PROGRESS"
          register: local_network_policies
    - when: event_type == "pre_delete"
      blocks:
      - delete_local_network_policies:
          db: $db
          filter:
            network_policy_id: $network_policy.id