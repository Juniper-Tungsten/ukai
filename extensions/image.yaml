- define:
    name: create_local_image
    args:
      local_image: object
    body:
    - vars:
        image: $local_image.image
    - get_config: key=keystone default_value=null
      register: keystone_config
    - get_openstack_client:
        auth_url: $local_image.location.keystone_endpoint
        user_name: $keystone_config.user_name
        password: $keystone_config.password
        version: v2.0
        tenant_name: ""
        tenant_id: $image.tenant_id
        domain_name: ""
      register: client
    - openstack_token:
        client: $client
      register: token
    - openstack_endpoint: client=$client endpoint_type=image region=$local_image.location.region name="" availability=""
      register: url
    - http_post:
        url: "{{ url }}images"
        headers:
          X-Auth-Token: $token
          x-glance-api-copy-from: $image.url
          Content-Type: "application/octet-stream"
          x-image-meta-id: $image.id
          x-image-meta-disk_format: $image.disk_format
          x-image-meta-container_format: $image.container_format
          x-image-meta-min_disk: $image.min_disk
          x-image-meta-min_ram: $image.min_ram
          x-image-meta-is_public: "{{ image.is_public }}"
          x-image-meta-protected: "{{ image.protected }}"
          x-image-meta-name: $image.name
          x-image-meta-owner: $image.tenant_id
        post_data: ${nil}
      register: output
    - when: output.status_code == 300
      blocks:
      - vars:
          url: "{{ url }}v1/"
      - http_post:
          url: "{{ url }}images"
          headers:
            X-Auth-Token: $token
            x-glance-api-copy-from: $image.url
            Content-Type: "application/octet-stream"
            x-image-meta-id: $image.id
            x-image-meta-disk_format: $image.disk_format
            x-image-meta-container_format: $image.container_format
            x-image-meta-min_disk: $image.min_disk
            x-image-meta-min_ram: $image.min_ram
            x-image-meta-is_public: "{{ image.is_public }}"
            x-image-meta-protected: "{{ image.protected }}"
            x-image-meta-name: $image.name
            x-image-meta-owner: $image.tenant_id
          post_data: ${nil}
        register: output
    - when: output.status_code != 201
      fail: msg="${output.raw_body}"
    - blocks:
      - openstack_get:
          client: $client
          url: "{{ url }}images/{{ image.id }}"
      retries: 60
      delay: 3
    - return: $output.contents
- define:
    name: delete_local_image
    args:
      local_image: object
    body:
    - vars:
        image: $local_image.image
        region: $local_image.location.region
    - get_config: key=keystone default_value=null
      register: keystone_config
    - get_openstack_client:
        auth_url: $local_image.location.keystone_endpoint
        user_name: $keystone_config.user_name
        password: $keystone_config.password
        version: v2.0
        tenant_name: ""
        tenant_id: $image.tenant_id
        domain_name: ""
      register: client
    - openstack_token:
        client: $client
      register: token
    - openstack_endpoint: client=$client endpoint_type=image region=$region name="" availability=""
      register: url
    - http_delete:
        url: "{{ url }}images/{{ image.id }}"
        headers:
          X-Auth-Token: $token
      register: output
    - when: output.status_code == 300
      blocks:
      - http_delete:
          url: "{{ url }}v1/images/{{ image.id }}"
          headers:
            X-Auth-Token: $token
        register: output
    - when: output.status_code != 404 && output.status_code != 200 && output.status_code != 204
      fail: msg="${output.raw_body}"
- define:
    name: create_local_images
    args:
      db: object
      filter: object
    body:
    - transaction:
      - db_list:
          tx: $transaction
          schema_id: local_image
          filter: $filter
        register: local_images
    - blocks:
      - vars:
          status: ACTIVE
          task_status: COMPLETE
      - create_local_image:
          local_image: $item
        register: output
        rescue:
        - vars:
            output: $error
            status: ERROR
            task_status: IN_PROGRESS
      - transaction:
        - db_update:
            tx: $transaction
            schema_id: local_image
            data:
              id: $item.id
              image_id: $item.image_id
              status: $status
              task_status: $task_status
              output: $output
              tenant_id: $item.tenant_id
      with_items: $local_images
      worker: '$GetConfig("loop_worker", 10)'
- define:
    name: delete_local_images
    args:
      db: object
      filter: object
    body:
    - transaction:
      - db_list:
          tx: $transaction
          schema_id: local_image
          filter: $filter
        register: local_images
    - blocks:
      - delete_local_image:
          local_image: $item
      - transaction:
        - db_delete:
            tx: $transaction
            schema_id: local_image
            id: $item.id
          register: local_images
      with_items: $local_images
      worker: '$GetConfig("loop_worker", 10)'
- define:
    name: image_resource
    args:
      image: object
      event_type: string
      db: object
      transaction: object
      queue: object
    body:
    - when: event_type == "post_create_in_transaction"
      blocks:
      - db_list:
          tx: $transaction
          schema_id: location
          filter: {}
        register: locations
      - blocks:
        - db_create:
            tx: $transaction
            schema_id: local_image
            data:
              id: $UUID()
              image_id: $image.id
              location_id: $item.id
              task_status: "IN_PROGRESS"
        with_items: $locations
    - when: event_type == "post_create" || event_type == "post_update"
      job:
      - create_local_images:
          db: $db
          filter:
            image_id: $image.id
            task_status: "IN_PROGRESS"
      queue: $queue
    - when: event_type == "pre_delete"
      blocks:
      - delete_local_images:
          db: $db
          filter:
            image_id: $image.id
