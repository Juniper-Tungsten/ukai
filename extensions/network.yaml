- include: ./id_pool.yaml
- include: ./contrail.yaml
- define:
    name: create_local_network
    args:
      local_network: object
      db: object
    body:
    - blocks:
      - transaction:
        - db_list:
            tx: $transaction
            schema_id: route_target_association
            filter:
              network_id: "{{ local_network.network_id }}"
          register: route_targets
        - db_get:
            tx: $transaction
            schema_id: network
            id: $local_network.network_id
            tenant_id: ""
          register: network
        - db_get:
            tx: $transaction
            schema_id: location
            tenant_id: ""
            id: "{{ local_network.location_id }}"
          register: location
      - get_config: key="keystone" default_value=null
        register: keystone_config
      - get_openstack_client:
          auth_url: "{{ location.keystone_endpoint }}"
          user_name: "{{ keystone_config.user_name }}"
          password: "{{ keystone_config.password }}"
          version: v2.0
          tenant_name: ""
          tenant_id: $network.tenant_id
          domain_name: ""
        register: client
      - split:
          value: $local_network.cidr
          sep: "/"
        register: cidrs
      - contrail_fqdn:
          client: $client
          contrail_endpoint: $location.contrail_endpoint
          uuid: $local_network.tenant_id
        register: fqdn
      - append:
          list: $fqdn
          value: "{{ network.name }}"
        register: fqdn
      - get_config: key="asn" default_value=67676
        register: asn
      - vars:
          route_target_list: []
      - blocks:
        - append:
            list: $route_target_list
            value: "target:{{ asn }}:{{ item.route_target }}"
          register: route_target_list
        with_items: $route_targets
      - ip_add:
            ip: $cidrs[0]
            value: 1
        register: default_gw
      - vars:
          network_policy_refs: []
      - blocks:
        - contrail_id_to_fqdn:
            client: $client
            uuid: $item
            contrail_endpoint:  $location.contrail_endpoint
          register: fqdn
        - append:
            list: $network_policy_refs
            value:
              attr:
                timer: null
                sequence:
                  major: 0
                  minor: 0
              to: $fqdn
          register: network_policy_refs
        with_items: $network.policies
      - openstack_ensure:
          client: $client
          url: "{{ location.contrail_endpoint }}/virtual-network/{{ local_network.network_id }}"
          post_url: "{{ location.contrail_endpoint }}/virtual-networks"
          data:
            virtual-network:
              uuid: "{{ local_network.network_id }}"
              parent_type: "project"
              display_name: "{{ network.name }}"
              fq_name: $fqdn
              network_ipam_refs:
              - attr:
                  ipam_subnets:
                  - subnet:
                      ip_prefix: "{{ cidrs.0 }}"
                      ip_prefix_len: "{{ cidrs.1 }}"
                    default_gateway: $default_gw
                    subnet_name: default
                to:
                    - "default-domain"
                    - "default-project"
                    - "default-network-ipam"
              virtual_network_network_id: "{{ network.contrail_id }}"
              route_target_list:
                route_target: $route_target_list
              network_policy_refs: $network_policy_refs
        register: output
- define:
    name: delete_local_network
    args:
      local_network: object
    body:
    - vars:
        location: $local_network.location
    - get_config: key="keystone" default_value=null
      register: keystone_config
    - get_openstack_client:
        auth_url: "{{ location.keystone_endpoint }}"
        user_name: "{{ keystone_config.user_name }}"
        password: "{{ keystone_config.password }}"
        version: v2.0
        tenant_name: ""
        tenant_id: $local_network.tenant_id
        domain_name: ""
      register: client
    - openstack_delete:
        client: $client
        url: "{{ location.contrail_endpoint }}/virtual-network/{{ local_network.network_id }}"
- define:
    name: associate_route_target
    args:
      network: object
      transaction: object
    body:
    - allocate_id:
        transaction: $transaction
        name: route_target
      register: id
    - when: id == -1
      error:
        name: CustomException
        code: 400
        message: "server side resource error"
    - db_create:
        schema_id: route_target_association
        tx: $transaction
        data:
          id: "$UUID()"
          route_target: "{{ id }}"
          network_id: "{{ network.id }}"
- define:
    name: create_local_network_in_db
    args:
      network: object
      transaction: object
      location: object
    body:
    - parse_cidr:
        cidr: $network.cidr
      register: pool
    - vars:
        len: $network.local_prefix_len
        size: "${1 << (pool[2] - network.local_prefix_len)}"
    - allocate_range:
        transaction: $transaction
        name: $network.id
        size: $size
      register: network_range
    - ip_add:
          ip: $pool[0]
          value: "$network_range[0]"
      register: cidr
    - db_create:
        tx: $transaction
        schema_id: local_network
        data:
          id: $UUID()
          network_id: $network.id
          location_id: $location.id
          cidr: "{{cidr}}/{{len}}"
          task_status: "IN_PROGRESS"
          tenant_id: $network.tenant_id
- define:
    name: deassociate_route_target
    args:
      network: object
      transaction: object
    body:
    - db_list:
        schema_id: route_target_association
        tx: $transaction
        filter:
          network_id: "{{ network.id }}"
      register: rts
    - blocks:
      - deallocate_id:
          transaction: $transaction
          name: route_target
          id: "{{ item.route_target }}"
      - db_delete:
          schema_id: route_target_association
          tx: $transaction
          id: "{{ item.id }}"
      with_items: $rts
- define:
    name: create_local_networks
    args:
      db: object
      filter: object
    body:
      - transaction:
        - db_list:
            tx: $transaction
            schema_id: local_network
            filter: $filter
          register: local_networks
      - blocks:
        - vars:
            status: ACTIVE
            task_status: COMPLETE
        - create_local_network:
            db: $db
            local_network: $item
          register: output
          rescue:
            - vars:
                status: ERROR
                task_status: IN_PROGRESS
                output: $error
        - transaction:
          - db_update:
              tx: $transaction
              schema_id: local_network
              data:
                id: "{{ item.id }}"
                network_id: "{{ item.network_id }}"
                status: $status
                task_status: $task_status
                output: $output
        with_items: $local_networks
        worker: '$GetConfig("loop_worker", 10)'
- define:
    name: delete_local_networks
    args:
      db: object
      filter: object
    body:
    - transaction:
      - db_list:
          tx: $transaction
          schema_id: local_network
          filter: $filter
        register: local_networks
    - blocks:
      - delete_local_network:
          local_network: $item
      - transaction:
        - db_delete:
            schema_id: local_network
            tx: $transaction
            id: $item.id
      with_items: $local_networks
      worker: '$GetConfig("loop_worker", 10)'
- define:
    name: network_resource
    args:
      db: object
      network: object
      transaction: object
      event_type: string
      queue: object
    body:
      - when: event_type == "pre_create" || event_type == "pre_update"
        blocks:
        - vars:
            policies: []
        - debug: msg=$network.policies
        - blocks:
          - append:
              list: $policies
              value: $item
            register: policies
            when: item != null && item != ""
          with_items: $network.policies
        - vars:
            network.policies: $policies
        - debug: msg=$policies
      - when: event_type == "post_create_in_transaction"
        blocks:
        - parse_cidr:
            cidr: $network.cidr
          register: pool
        - when: FloatToInt(network.local_prefix_len) <= pool[1]
          blocks:
          - error:
              name: CustomException
              code: 400
              message: "pool end is bigger than start"
        - allocate_id:
            transaction: $transaction
            name: virtual_network_id
          register: contrail_id
        - when: contrail_id == -1
          error:
            name: CustomException
            code: 400
            message: "server side resource error"
        - db_update:
            tx: $transaction
            schema_id: network
            data:
              id: "{{ network.id }}"
              contrail_id: "{{ contrail_id }}"
        - associate_route_target:
            transaction: $transaction
            network: $network
        - db_list:
            tx: $transaction
            schema_id: location
            filter: {}
          register: locations
        - parse_cidr:
            cidr: $network.cidr
          register: pool
        - when: pool[2] == 128 && pool[1] < 96
          fail: msg="IPv6 prefix larger than 96 did not supported"
        - db_create:
            tx: $transaction
            schema_id: id_pool
            data:
              id: $network.id
              start: 0
              end: "${1 << (pool[2] - pool[1])}"
              name: $network.id
              assigned: false
        - vars:
            network.local_prefix_len: "${FloatToInt(network.local_prefix_len)}"
        - create_local_network_in_db:
            network: $network
            location: $item
            transaction: $transaction
          with_items: $locations
      - when: event_type == "post_create" || event_type == "post_update"
        job:
        - create_local_networks:
            db: $db
            filter:
              network_id: $network.id
        queue: $queue
      - when: event_type == "pre_delete"
        blocks:
        - delete_local_networks:
            db: $db
            filter:
              network_id: $network.id
      - when: event_type == "pre_delete_in_transaction"
        blocks:
        - db_exec:
            tx: $transaction
            sql: "delete from id_pools where name=?"
            arguments:
            - $network.id
        - deallocate_id:
            transaction: $transaction
            name: virtual_network_id
            id: "{{ network.contrail_id }}"
        - deassociate_route_target:
            transaction: $transaction
            network: $network