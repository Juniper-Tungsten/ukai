- define:
    name: create_local_server
    args:
      local_server: object
    body:
    - vars:
        region: $local_server.location.region
        location: $local_server.location
        server: $local_server.server
    - get_config: key="keystone" default_value=""
      register: keystone_config
    - get_openstack_client:
        auth_url: "{{ location.keystone_endpoint }}"
        user_name: "{{ keystone_config.user_name }}"
        password: "{{ keystone_config.password }}"
        version: v2.0
        tenant_name:  ""
        tenant_id: $server.tenant_id
        domain_name: ""
      register: client
    - openstack_endpoint: client=$client endpoint_type=compute region="{{region}}" name="" availability=""
      register: url
    - openstack_post:
        client: $client
        url: "{{ url }}servers"
        data:
          server:
            name: "{{ server.name }}"
            imageRef: "{{ server.image_id }}"
            flavorRef: "{{ server.flavor_id }}"
            networks:
            - uuid: "{{ server.network_id }}"
            security_groups:
            - name: "{{ server.security_group.name }}"
      register: output
    - blocks:
      - openstack_get:
          client: $client
          url: "{{ url }}servers/{{ output.server.id }}"
        register: output
      - fail: msg="vm isn't still active"
        when: output.server.status != "ACTIVE"
      retries: 60
      delay: 3
    - return: $output.server
- define:
    name: delete_local_server
    args:
      local_server: object
    body:
    - vars:
        region: $local_server.location.region
        location: $local_server.location
        server: $local_server.server
    - get_config: key="keystone" default_value=""
      register: keystone_config
    - get_openstack_client:
        auth_url: "{{ location.keystone_endpoint }}"
        user_name: "{{ keystone_config.user_name }}"
        password: "{{ keystone_config.password }}"
        version: v2.0
        tenant_name:  ""
        tenant_id: $server.tenant_id
        domain_name: ""
      register: client
    - openstack_endpoint: client=$client endpoint_type=compute region="{{region}}" name="" availability=""
      register: url
    - openstack_delete:
        client: $client
        url: "{{ url }}servers/{{ local_server.instance_id }}"
- define:
    name: create_local_servers
    args:
      db: object
      filter: object
    body:
      - transaction:
        - db_list:
            tx: $transaction
            schema_id: local_server
            filter: $filter
          register: local_servers
      - blocks:
        - vars:
            status: ACTIVE
            task_status: COMPLETE
        - create_local_server:
            local_server: $item
          register: output
          rescue:
          - vars:
              status: ERROR
              task_status: IN_PROGRESS
              output: $error
        - transaction:
          - db_update:
              tx: $transaction
              schema_id: local_server
              data:
                id: "{{ item.id }}"
                server_id: "{{ item.server.id }}"
                instance_id: "{{ output.id }}"
                status: $status
                output: $output
                task_status: $task_status
        with_items: $local_servers
        worker: '$GetConfig("loop_worker", 10)'
- define:
    name: delete_local_servers
    args:
      db: object
      filter: object
    body:
    - transaction:
      - db_list:
          tx: $transaction
          schema_id: local_server
          filter: $filter
        register: local_servers
    - blocks:
      - get_config: key="keystone" default_value=""
        register: keystone_config
      - get_openstack_client:
          auth_url: "{{ item.location.keystone_endpoint }}"
          user_name: "{{ keystone_config.user_name }}"
          password: "{{ keystone_config.password }}"
          version: v2.0
          tenant_name:  ""
          tenant_id: $item.server.tenant_id
          domain_name: ""
        register: client
      - delete_local_server:
          local_server: $item
      - transaction:
        - db_delete:
            tx: $transaction
            schema_id: local_server
            id: $item.id
      with_items: $local_servers
      worker: '$GetConfig("loop_worker", 10)'
- define:
    name: server_resource
    args:
      server: object
      event_type: string
      db: object
      transaction: object
      queue: $queue
    body:
    - when: event_type == "post_create_in_transaction"
      blocks:
      - db_list:
          tx: $transaction
          schema_id: location
          filter: {}
        register: locations
      - blocks:
        - db_create:
            tx: $transaction
            schema_id: local_server
            data:
              id: "$UUID()"
              server_id: "{{ server.id }}"
              location_id: "{{ item.id }}"
              task_status: "IN_PROGRESS"
        with_items: $locations
    - when: event_type == "post_create" || event_type == "post_update"
      blocks:
      - job:
        - create_local_servers:
            db: $db
            filter:
              server_id: "{{ server.id }}"
              task_status: "IN_PROGRESS"
        queue: $queue
    - when: event_type == "pre_delete"
      blocks:
      - delete_local_servers:
          db: $db
          filter:
            server_id: "{{ server.id }}"