- include: ./contrail.yaml
- define:
    name: create_local_service_instance
    args:
      local_service_instance: object
    body:
    - vars:
        location: $local_service_instance.location
        service_instance: $local_service_instance.service_instance
        contrail_endpoint: $local_service_instance.location.contrail_endpoint
        service_template_name: $local_service_instance.service_instance.service_template.name
    - get_config: key=keystone default_value=null
      register: keystone_config
    - get_openstack_client:
        auth_url: "{{ location.keystone_endpoint }}"
        user_name: "{{ keystone_config.user_name }}"
        password: "{{ keystone_config.password }}"
        version: v2.0
        tenant_name: "{{ keystone_config.tenant_name }}"
        domain_name: ""
      register: client
    - contrail_fqdn:
        client: $client
        contrail_endpoint:  $contrail_endpoint
        uuid: $service_instance.tenant_id
      register: fqdn
    - append:
        list: $fqdn
        value: "{{ service_instance.name }}"
      register: fqdn
    - blocks:
      - blocks:
        - contrail_id_to_fqdn:
              client: $client
              uuid: $item.virtual_network
              contrail_endpoint: $location.contrail_endpoint
          register: fqdn
        - vars:
            item.virtual_network: "{{ fqdn.0 }}:{{ fqdn.1 }}:{{ fqdn.2 }}"
        when: item.virtual_network != ""
      with_items: $service_instance.service_instance_properties.interface_list
    - openstack_ensure:
        client: $client
        url: "{{ contrail_endpoint }}/service-instance/{{ service_instance.id }}"
        post_url: "{{ contrail_endpoint }}/service-instances"
        data:
          service-instance:
            fq_name: $fqdn
            parent_type: "project"
            uuid: "{{ service_instance.id }}"
            service_instance_properties: $service_instance.service_instance_properties
            display_name: "{{ service_instance.name }}"
            service_template_refs:
              -
                to:
                  - "{{ fqdn.0 }}"
                  - "{{ service_template_name }}"
      register: output
    - return: $output
- define:
    name: delete_local_service_instance
    args:
      local_service_instance: object
    body:
    - vars:
        location: $local_service_instance.location
        service_instance: $local_service_instance.service_instance
        contrail_endpoint: $local_service_instance.location.contrail_endpoint
    - get_config: key=keystone default_value=null
      register: keystone_config
    - get_openstack_client:
        auth_url: "{{ location.keystone_endpoint }}"
        user_name: "{{ keystone_config.user_name }}"
        password: "{{ keystone_config.password }}"
        version: v2.0
        tenant_name: "{{ keystone_config.tenant_name }}"
        domain_name: ""
      register: client
    - openstack_delete:
        client: $client
        url: "{{ contrail_endpoint }}/service-instance/{{ service_instance.id }}"
- define:
    name: create_local_service_instances
    args:
      db: object
      filter: $filter
    body:
    - transaction:
      - db_list:
          tx: $transaction
          schema_id: local_service_instance
          filter: $filter
        register: local_service_instances
    - blocks:
      - vars:
          status: ACTIVE
          task_status: COMPLETE
      - create_local_service_instance:
          local_service_instance: $item
        register: output
        rescue:
        - vars:
            status: ERROR
            task_status: IN_PROGRESS
            output: $error
      - transaction:
        - db_update:
            tx: $transaction
            schema_id: local_service_instance
            data:
              id: "{{ item.id }}"
              service_instance_id: "{{ item.service_instance_id }}"
              status: $status
              task_status: $task_status
              output: $output
      with_items: $local_service_instances
      worker: '$GetConfig("loop_worker", 10)'
- define:
    name: delete_local_service_instances
    args:
      db: object
      filter: $filter
    body:
    - transaction:
      - db_list:
          tx: $transaction
          schema_id: local_service_instance
          filter: $filter
        register: local_service_instances
    - blocks:
      - get_config: key="keystone" default_value=""
        register: keystone_config
      - get_openstack_client:
          auth_url: "{{ item.location.keystone_endpoint }}"
          user_name: "{{ keystone_config.user_name }}"
          password: "{{ keystone_config.password }}"
          version: v2.0
          tenant_name:  "{{ keystone_config.tenant_name }}"
          domain_name: ""
        register: client
      - delete_local_service_instance:
          local_service_instance: $item
      - transaction:
        - db_delete:
            tx: $transaction
            schema_id: local_service_instance
            id: $item.id
      with_items: $local_service_instances
- define:
    name: service_instance_resource
    args:
      service_instance: object
      event_type: string
      db: object
      transaction: object
      queue: object
    body:
    - when: event_type == "pre_create" || event_type == "pre_update"
      blocks:
      - blocks:
        - vars:
            item.virtual_network: ""
          when: item.virtual_network == null
        with_items: $service_instance.service_instance_properties.interface_list
    - when: event_type == "post_create_in_transaction"
      blocks:
      - db_get:
          schema_id: service_template
          tx: $transaction
          id: $service_instance.service_template_id
          tenant_id: $service_instance.tenant_id
        rescue:
        - error:
            name: CustomException
            code: 404
            message: "service template not found"
      - db_list:
          tx: $transaction
          schema_id: location
          filter: {}
        register: locations
      - blocks:
        - db_create:
            tx: $transaction
            schema_id: local_service_instance
            data:
              id: $UUID()
              service_instance_id: "{{ service_instance.id }}"
              location_id: "{{ item.id }}"
              task_status: "IN_PROGRESS"
        with_items: $locations
    - when: event_type == "post_create" || event_type == "post_update"
      job:
      - create_local_service_instances:
          db: $db
          filter:
            service_instance_id: "{{ service_instance.id }}"
            task_status: "IN_PROGRESS"
        register: local_service_instances
      queue: $queue
    - when: event_type == "pre_delete"
      blocks:
      - delete_local_service_instances:
          db: $db
          filter:
            service_instance_id: $service_instance.id
          register: local_service_instances
