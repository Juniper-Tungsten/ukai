test_suite:
  tests:
  - name: Conflict Test
    test:
    - include: "../util.yaml"
    - command: "rm {{ __dir__ }}/../../test.db"
      rescue: []
    - get_config: key="keystone" default_value=null
      register: keystone_config
    - gohan_server: config_file=../gohan.yaml test=${true}
      register: gohan_server
    - vars:
        server: $gohan_server.server
        queue: $gohan_server.queue
    - include: ./base_resource.yaml
    - include: ./backend.yaml
    - get_openstack_client:
        auth_url: "{{ locations.0.keystone_endpoint }}"
        user_name: "{{ keystone_config.user_name }}"
        password: "{{ keystone_config.password }}"
        version: v2.0
        tenant_name:  "{{ keystone_config.tenant_name }}"
        domain_name: ""
        tenant_id: ""
      register: client
    - vars:
        conflict_data:
        - path: "{{ gohan_url }}/v1.0/admin/id_pools"
          data:
            start: 1000
            end: 2000
            name: route_target
            assigned: false
            group: ""
        - path: "{{ gohan_url }}/v1.0/tenant/networks"
          data:
            id: $blue_id
            name: $blue_id
            cidr: 10.0.0.0/20
            local_prefix_len: 24
        - path: "{{ gohan_url }}/v1.0/tenant/security_groups"
          data:
            id: $sg_id
            name: $sg_id
        - path: "{{ gohan_url }}/v1.0/tenant/security_group_rules"
          data:
            id: $sg_rule_id
            name: "test"
            security_group_id: bad_sg_id
            ethertype: IPv4
            protocol: tcp
            port_range_min: 80
            port_range_max: 80
            direction: egress
            remote_ip_prefix: 10.0.0.0/24
        - path: "{{ gohan_url }}/v1.0/tenant/images"
          data:
            id: "{{ image_id }}"
            url: ${GetConfig("image_url", "")}
            name: upload_test
            disk_format: qcow2
        - path: "{{ gohan_url }}/v1.0/servers"
          data:
            id: $server_id
            name: $server_id
            image_id: $image_id
            network_id: $blue_id
            security_group_id: $sg_id
        - path: "{{ gohan_url }}/v1.0/servers"
          data:
            id: $UUID()
            name: $server_id
            image_id: bad_image_id
            network_id: $blue_id
            security_group_id: $sg_id
        - path: "{{ gohan_url }}/v1.0/servers"
          data:
            id: $UUID()
            name: $server_id
            image_id: $image_id
            network_id: bad_network_id
            security_group_id: $sg_id
        - path: "{{ gohan_url }}/v1.0/servers"
          data:
            id: $UUID()
            name: $server_id
            image_id: $image_id
            network_id: $blue_id
            security_group_id: bad_sg_id
        - path: "{{ gohan_url }}/v1.0/tenant/service_templates"
          data:
            id: $UUID()
            name: test_service_template
            image_id: bad_image_id
            service_mode: transparent
            tenant_id: $tenant_id
            flavor: m1.tiny
        - path: "{{ gohan_url }}/v1.0/tenant/service_instances"
          data:
            id: $UUID()
            name: test_service_instance
            service_template_id: "bad_service_template_id"
            tenant_id: $tenant_id
            service_instance_properties:
              management_virtual_network: "any"
              right_virtual_network: "any"
              scale_out:
                max_instances: 1
              left_virtual_network: "any"
              interface_list:
                -
                  virtual_network: "any"
                -
                  virtual_network: "any"
                -
                  virtual_network: "any"
        # sqlite3 issue?
        # - path: "{{ gohan_url }}/v1.0/tenant/network_policies"
        #   data:
        #     id: $UUID()
        #     source_network_id: "bad_source_network"
        #     dest_network_id: $red_id
        #     entries:
        #     - action_list:
        #         simple_action: pass
        #       direction: "<>"
        #       protocol: any
        #       application: []
        #       rule_sequence:
        #         major: -1
        #         minor: -1
        #       src_addresses:
        #       - virtual_network: "default-domain:admin:blue"
        #       dst_addresses:
        #       - virtual_network: "default-domain:admin:red"
        #       src_ports:
        #       - start_port: -1
        #         end_port: -1
        #       dst_ports:
        #       - start_port: -1
        #         end_port: -1
        #     tenant_id: $tenant_id
        # - path: "{{ gohan_url }}/v1.0/tenant/network_policies"
        #   data:
        #     id: $UUID()
        #     source_network_id: $blue_id
        #     dest_network_id: "bad_dest_network"
        #     entries:
        #     - action_list:
        #         simple_action: pass
        #       direction: "<>"
        #       protocol: any
        #       application: []
        #       rule_sequence:
        #         major: -1
        #         minor: -1
        #       src_addresses:
        #       - virtual_network: "default-domain:admin:blue"
        #       dst_addresses:
        #       - virtual_network: "default-domain:admin:red"
        #       src_ports:
        #       - start_port: -1
        #         end_port: -1
        #       dst_ports:
        #       - start_port: -1
        #         end_port: -1
        #     tenant_id: $tenant_id
        - path: "{{ gohan_url }}/v1.0/tenant/heat_instances"
          data:
            heat_instance:
              id: $UUID()
              name: heat_instance
              tenant_id: $tenant_id
              heat_template_id: bad_heat_template_id
              parameters:
                flavor: m1.tiny
                image: tinycore
    - name: create locations
      blocks:
      - openstack_ensure:
          client: $client
          url: "{{ gohan_url }}/v1.0/locations/{{ item.id }}"
          post_url: "{{ gohan_url }}/v1.0/locations"
          data: $item
      with_items: $locations
    - name: create base resources
      blocks:
      - vars:
          path: $item.path
          data: $item.data
      - openstack_post:
          client: $client
          url: $path
          data: $data
      - wait_queue: queue=$queue
      with_items: $test_data
    - name: conflict request
      blocks:
      - vars:
          path: $item.path
          data: $item.data
          success: false
      - openstack_post:
          client: $client
          url: $path
          data: $data
        register: output
        rescue:
        - vars:
            success: true
      - when: success != true
        blocks:
        - debug: msg=$path
        - debug: msg=$data
        - fail: msg="expected fail for {{ path }}"
      with_items: $conflict_data
    - wait_queue: queue=$queue
    - name: delete resources
      blocks:
      - openstack_delete:
          client: $client
          url: $item
      - wait_queue: queue=$queue
      with_items: $delete_path
    - stop_test_server: server=$server