test_suite:
  before_each:
  - read_config: path="{{ __dir__ }}/../../gohan.yaml"
  - command: rm ./test.db
    rescue: []
  tests:
  - name: Test Service instance resource
    test:
    - include: ../image.yaml
    - include: ../service_template.yaml
    - include: ../service_instance.yaml
    - include: ../util.yaml
    - gohan_load_schema: src="{{ __dir__ }}/../../schema/schema.yaml"
    - connect_db: db_type=sqlite3 connection=./test.db
      register: db
    - init_db: db_type=sqlite3 connection=./test.db
    - setup_resources:
        db: $db
    - get_config: key="keystone"
      register: keystone_config
    - uuid:
      register: image_id
    - uuid:
      register: service_template_id
    - uuid:
      register: service_instance_id
    - vars:
        image:
          id: "{{ image_id }}"
          url: http://192.168.0.6/tinycore-net-transparent-fw.qcow2
          name: upload_test
          disk_format: qcow2
          tenant_id: admin
        service_template:
          id: "{{ service_template_id }}"
          name: test_service_template
          image_id: "{{ image_id }}"
          service_mode: transparent
          flavor: m1.tiny
        service_instance:
          id: "{{ service_instance_id }}"
          name: test_service_template
          service_template_id: "{{ service_template_id }}"
          tenant_id: admin
          service_instance_properties:
            management_virtual_network: ""
            right_virtual_network: ""
            scale_out:
              max_instances: 1
            left_virtual_network: ""
            interface_list:
              -
                virtual_network: ""
              -
                virtual_network: ""
              -
                virtual_network: ""
    - transaction:
        - db_create:
            tx: $transaction
            schema_id: image
            data: $image
        - image_resource:
            client: $client
            image: $image
            transaction: $transaction
            event_type: post_create_in_transaction
        - db_create:
            tx: $transaction
            schema_id: service_template
            data: $service_template
        - service_template_resource:
            client: $client
            service_template: $service_template
            transaction: $transaction
            event_type: post_create_in_transaction
        - db_create:
            tx: $transaction
            schema_id: service_instance
            data: $service_instance
        - service_instance_resource:
            client: $client
            service_instance: $service_instance
            transaction: $transaction
            event_type: post_create_in_transaction
    - image_resource:
        image: $image
        db: $db
        event_type: post_create
    - transaction:
      - db_list:
          tx: $transaction
          schema_id: location
        register: locations
    - blocks:
      - get_config: key="keystone"
        register: keystone_config
      - get_openstack_client:
          auth_url: "{{ item.keystone_endpoint }}"
          user_name: "{{ keystone_config.user_name }}"
          password: "{{ keystone_config.password }}"
          version: v2.0
          tenant_name:  "{{ keystone_config.tenant_name }}"
        register: client
      - openstack_endpoint: client=$client endpoint_type=image region="{{ item.location.region }}"
        register: url
      - openstack_get:
          client: $client
          url: "{{ url }}/images/{{ image.id }}"
        retries: 60
        delay: 3
      with_items: $locations
      worker: 10
    - service_template_resource:
        service_template: $service_template
        db: $db
        event_type: post_create
    - sleep: 3000
    - service_instance_resource:
        service_instance: $service_instance
        db: $db
        event_type: post_create
    - service_instance_resource:
        service_instance: $service_instance
        db: $db
        event_type: pre_delete
    - service_template_resource:
        service_template: $service_template
        db: $db
        event_type: pre_delete
    - image_resource:
        client: $client
        image: $image
        db: $db
        event_type: pre_delete
